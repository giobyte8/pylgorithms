"""Search in Rotated Sorted Array
Source: https://www.educative.io/module/page/8q5JgjuzjGkprAwQG/10370001/4896118288416768/6562044456992768

# Below desc was generated by codewhisperer
# just by typing the problem title. It seems accurate

Suppose an array sorted in ascending order is rotated at some pivot unknown to
you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index,
otherwise return -1.
- You may assume no duplicate exists in the array.
- Your algorithm's runtime complexity must be in the order of O(log n).
"""

from typing import List


def binary_search_rotated(nums: List[int], target: int) -> int:
    if not nums:
        return -1

    if len(nums) == 1:
        return 0 if nums[0] == target else -1

    start = 0
    end = len(nums) -1

    while start <= end:
        pivot = (end + start) // 2

        if nums[pivot] == target:
            return pivot

        # Is first half sorted?
        if nums[pivot] >= nums[start]:

            # Target is in first half
            if in_range(nums, target, start, pivot):
                end = pivot - 1

            # Look for target in second half
            else:
                start = pivot + 1
        else:
            if in_range(nums, target, pivot, end):
                start = pivot + 1

            # Look for target in unsorted first half
            else:
                end = pivot - 1

    return -1


def in_range(nums: List[int], target: int, start: int, end: int) -> bool:
    return nums[start] <= target <= nums[end]
